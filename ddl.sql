-- Create Main tables

CREATE TABLE REGIONS 
( 
    REGIONID NUMBER,
    REGIONNAME VARCHAR2(100) NOT NULL
);

ALTER TABLE REGIONS ADD CONSTRAINT PK_REGIONS PRIMARY KEY (REGIONID);
GRANT SELECT, INSERT, UPDATE, DELETE ON REGIONS To app_user;



CREATE TABLE COUNTRIES
(
    COUNTRYID NUMBER,
    COUNTRYNAME VARCHAR2(100) NOT NULL,
    REGION NUMBER
);

ALTER TABLE COUNTRIES ADD CONSTRAINT PK_COUNTRIES PRIMARY KEY (COUNTRYID);
ALTER TABLE COUNTRIES ADD CONSTRAINT FK_COUNTRIES FOREIGN KEY (REGION) REFERENCES REGIONS(REGIONID);
GRANT SELECT, INSERT, UPDATE, DELETE ON COUNTRIES To app_user;



CREATE TABLE LOCATIONS
(
    LOCATIONID NUMBER,
    ADDRESS VARCHAR2(1000) NOT NULL,
    POSTALCODE VARCHAR2(100) NOT NULL,
    CITY VARCHAR2(100) NOT NULL,
    STATE VARCHAR2(100) NOT NULL,
    COUNTRY NUMBER
);

ALTER TABLE LOCATIONS ADD CONSTRAINT PK_LOCATIONS PRIMARY KEY (LOCATIONID);
ALTER TABLE LOCATIONS ADD CONSTRAINT FK_LOCATIONS FOREIGN KEY (COUNTRY) REFERENCES COUNTRIES(COUNTRYID);
GRANT SELECT, INSERT, UPDATE, DELETE ON LOCATIONS To app_user;


CREATE TABLE WAREHOUSES
(
    WAREHOUSEID NUMBER,
    WAREHOUSENAME VARCHAR2(100) NOT NULL,
    LOCATION NUMBER
);

ALTER TABLE WAREHOUSES ADD CONSTRAINT PK_WAREHOUSES PRIMARY KEY (WAREHOUSEID);
ALTER TABLE WAREHOUSES ADD CONSTRAINT FK_WAREHOUSES FOREIGN KEY (LOCATION) REFERENCES LOCATIONS(LOCATIONID);
GRANT SELECT, INSERT, UPDATE, DELETE ON WAREHOUSES To app_user;


CREATE TABLE DEPARTMENT
(
    DEPTID NUMBER,
    DEPTNAME VARCHAR2(100) NOT NULL,
    LOCATION  NUMBER
);

ALTER TABLE DEPARTMENT ADD CONSTRAINT PK_DEPARTMENT PRIMARY KEY (DEPTID);
ALTER TABLE DEPARTMENT ADD CONSTRAINT FK_DEPARTMENT FOREIGN KEY (LOCATION) REFERENCES LOCATIONS(LOCATIONID);
GRANT SELECT, INSERT, UPDATE, DELETE ON DEPARTMENT To app_user;



CREATE TABLE EMPLOYEES
(
    EMPLOYEEID NUMBER,
    FIRSTNAME VARCHAR2(100) NOT NULL,
    LASTNAME  VARCHAR2(100) NOT NULL,
    EMAIL  VARCHAR2(100) UNIQUE,
    PHONE  VARCHAR2(100) NOT NULL,
    HIREDATE  DATE,
    DOB DATE,
    SALARY NUMBER,
    MANAGER  NUMBER,
    DESIGNATION  VARCHAR2(100),
    DEPARTMENT  NUMBER
);

ALTER TABLE EMPLOYEES ADD CONSTRAINT PK_EMPLOYEES PRIMARY KEY (EMPLOYEEID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT FK_EMPLOYEES FOREIGN KEY (DEPARTMENT) REFERENCES DEPARTMENT(DEPTID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT FK_EMPLOYEES_2 FOREIGN KEY (MANAGER) REFERENCES EMPLOYEES(EMPLOYEEID);
GRANT SELECT, INSERT, UPDATE, DELETE ON EMPLOYEES To app_user;



CREATE TABLE PRODUCT_CATEGORY
(
    CATEGORYID NUMBER,
    CATEGORYNAME VARCHAR2(100) NOT NULL
);

ALTER TABLE PRODUCT_CATEGORY ADD CONSTRAINT PK_PRODUCT_CATEGORY PRIMARY KEY (CATEGORYID);
GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCT_CATEGORY To app_user;


CREATE TABLE PRODUCTS
(
    PRODUCTID NUMBER,
    PRODUCTNAME VARCHAR2(100) NOT NULL,
    DESCRIPTION  VARCHAR2(100),
    STANDARDCOST  NUMBER,
    LISTPRICE  NUMBER,
    CATEGORY  NUMBER
);

ALTER TABLE PRODUCTS ADD CONSTRAINT PK_PRODUCTS PRIMARY KEY (PRODUCTID);
ALTER TABLE PRODUCTS ADD CONSTRAINT FK_PRODUCTS FOREIGN KEY (CATEGORY) REFERENCES PRODUCT_CATEGORY(CATEGORYID);
GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCTS To app_user;


CREATE TABLE INVENTORY
(
    INVENTORYID NUMBER,
    PRODUCTID NUMBER,
    QUANTITY NUMBER
);

ALTER TABLE INVENTORY ADD CONSTRAINT PK_INVENTORY PRIMARY KEY (INVENTORYID);
ALTER TABLE INVENTORY ADD CONSTRAINT FK_INVENTORY FOREIGN KEY (PRODUCTID) REFERENCES PRODUCTS(PRODUCTID);
GRANT SELECT, INSERT, UPDATE, DELETE ON INVENTORY To app_user;


CREATE TABLE CUSTOMERS
(
    CUSTOMERID NUMBER,
    NAME VARCHAR2(100) NOT NULL,
    ADDRESS  VARCHAR2(100) NOT NULL,
    WEBSITE  VARCHAR2(100),
    FACEBOOK  VARCHAR2(100),
    TWITTER  VARCHAR2(100),
    WHATSAPP VARCHAR2(100)
);
ALTER TABLE CUSTOMERS ADD CONSTRAINT PK_CUSTOMERS PRIMARY KEY (CUSTOMERID);
GRANT SELECT, INSERT, UPDATE, DELETE ON CUSTOMERS To app_user;


CREATE TABLE CONTACTS
(
    CONTACTID NUMBER,
    FIRSTNAME VARCHAR2(100),
    LASTNAME  VARCHAR2(100),
    EMAIL  VARCHAR2(100),
    PHONE  VARCHAR2(100),
    CUSTOMERID  NUMBER
);

ALTER TABLE CONTACTS ADD CONSTRAINT PK_CONTACTS PRIMARY KEY (CONTACTID);
ALTER TABLE CONTACTS ADD CONSTRAINT FK_CONTACTS FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMERS(CUSTOMERID);
GRANT SELECT, INSERT, UPDATE, DELETE ON CONTACTS To app_user;


CREATE TABLE ORDER_STATUS
(
    STATUSID NUMBER,
    STATUS  VARCHAR2(100)
);
ALTER TABLE ORDER_STATUS ADD CONSTRAINT PK_ORDER_STATUS PRIMARY KEY (STATUSID);
GRANT SELECT, INSERT, UPDATE, DELETE ON ORDER_STATUS To app_user;


CREATE TABLE ORDERS
(
    ORDERID NUMBER,
    CUSTOMERID NUMBER,
    STATUS  NUMBER,
    SALESMANID  NUMBER,
    ORDERDATE  DATE
);

ALTER TABLE ORDERS ADD CONSTRAINT PK_ORDERS PRIMARY KEY (ORDERID);
ALTER TABLE ORDERS ADD CONSTRAINT FK_ORDERS FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMERS(CUSTOMERID);
ALTER TABLE ORDERS ADD CONSTRAINT FK_ORDERS_2 FOREIGN KEY (SALESMANID) REFERENCES EMPLOYEES(EMPLOYEEID);
ALTER TABLE ORDERS ADD CONSTRAINT FK_ORDERS_3 FOREIGN KEY (STATUS) REFERENCES ORDER_STATUS(STATUSID);
GRANT SELECT, INSERT, UPDATE, DELETE ON ORDERS To app_user;


CREATE TABLE ORDER_ITEMS
(
    ORDERID NUMBER,
    ITEMID NUMBER,
    PRODUCTID  NUMBER,
    QUANTITY  NUMBER,
    UNITPRICE  NUMBER,
    INVENTORYID NUMBER,
    WAREHOUSEID NUMBER
);

ALTER TABLE ORDER_ITEMS ADD CONSTRAINT PK_ORDER_ITEMS PRIMARY KEY (ORDERID,ITEMID);
ALTER TABLE ORDER_ITEMS ADD CONSTRAINT FK_ORDER_ITEMS FOREIGN KEY (PRODUCTID) REFERENCES PRODUCTS(PRODUCTID);
ALTER TABLE ORDER_ITEMS ADD CONSTRAINT FK_ORDER_ITEMS_2 FOREIGN KEY (WAREHOUSEID) REFERENCES WAREHOUSES(WAREHOUSEID);
ALTER TABLE ORDER_ITEMS ADD CONSTRAINT FK_ORDER_ITEMS_3 FOREIGN KEY (INVENTORYID) REFERENCES INVENTORY(INVENTORYID);
GRANT SELECT, INSERT, UPDATE, DELETE ON ORDER_ITEMS To app_user;









-- Create Audit tables


CREATE TABLE REGIONS_AUD
( 
    OLDREGIONNAME VARCHAR2(100),
	NEWREGIONNAME VARCHAR2(100),
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE
);


CREATE OR REPLACE TRIGGER TRG_REGIONS_AUD
BEFORE INSERT OR DELETE OR UPDATE ON REGIONS
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO REGIONS_AUD (OLDREGIONNAME,	NEWREGIONNAME, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(NULL, :NEW.REGIONNAME , 'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO REGIONS_AUD (OLDREGIONNAME,	NEWREGIONNAME, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.REGIONNAME, NULL, 'D', v_user, v_date);
  ELSIF UPDATING THEN
    INSERT INTO REGIONS_AUD (OLDREGIONNAME,	NEWREGIONNAME, OPERATION, USER_NAME, CREATED_DATE) 
    VALUES(:OLD.REGIONNAME, :NEW.REGIONNAME, 'U', v_user, v_date);
  END IF;
END;
/



CREATE TABLE COUNTRIES_AUD
(
    OLDCOUNTRYNAME VARCHAR2(100),
	NEWCOUNTRYNAME VARCHAR2(100),
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE
);


CREATE OR REPLACE TRIGGER TRG_COUNTRIES_AUD
BEFORE INSERT OR DELETE OR UPDATE ON COUNTRIES
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO COUNTRIES_AUD (OLDCOUNTRYNAME,	NEWCOUNTRYNAME, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(NULL, :NEW.COUNTRYNAME , 'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO COUNTRIES_AUD (OLDCOUNTRYNAME,	NEWCOUNTRYNAME, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.COUNTRYNAME, NULL, 'D', v_user, v_date);
  ELSIF UPDATING THEN
    INSERT INTO COUNTRIES_AUD (OLDCOUNTRYNAME,	NEWCOUNTRYNAME, OPERATION, USER_NAME, CREATED_DATE) 
    VALUES(:OLD.COUNTRYNAME, :NEW.COUNTRYNAME, 'U', v_user, v_date);
  END IF;
END;
/


CREATE TABLE LOCATIONS_AUD
(
    OLDADDRESS VARCHAR2(1000),
	NEWADDRESS VARCHAR2(1000),
    OLDPOSTALCODE VARCHAR2(100),
	NEWPOSTALCODE VARCHAR2(100),
    OLDCITY VARCHAR2(100),
	NEWCITY VARCHAR2(100),
    OLDSTATE VARCHAR2(100),
	NEWSTATE VARCHAR2(100),
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE
);

CREATE OR REPLACE TRIGGER TRG_LOCATIONS_AUD
BEFORE INSERT OR DELETE OR UPDATE ON LOCATIONS
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO LOCATIONS_AUD (OLDADDRESS,NEWADDRESS,OLDPOSTALCODE,NEWPOSTALCODE,OLDCITY,NEWCITY,OLDSTATE,NEWSTATE,OPERATION,USER_NAME,CREATED_DATE) 
	VALUES(NULL, :NEW.ADDRESS, NULL, :NEW.POSTALCODE , NULL, :NEW.CITY, NULL, :NEW.STATE, 'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO LOCATIONS_AUD (OLDADDRESS,NEWADDRESS,OLDPOSTALCODE,NEWPOSTALCODE,OLDCITY,NEWCITY,OLDSTATE,NEWSTATE,OPERATION,USER_NAME,CREATED_DATE) 
	VALUES(:OLD.ADDRESS, NULL, :OLD.POSTALCODE, NULL , :OLD.CITY, NULL, :OLD.STATE, NULL, 'D', v_user, v_date);
  ELSIF UPDATING THEN
    INSERT INTO LOCATIONS_AUD (OLDADDRESS,NEWADDRESS,OLDPOSTALCODE,NEWPOSTALCODE,OLDCITY,NEWCITY,OLDSTATE,NEWSTATE,OPERATION,USER_NAME,CREATED_DATE) 
    VALUES(:OLD.ADDRESS, :NEW.ADDRESS, :OLD.POSTALCODE, :NEW.POSTALCODE , :OLD.CITY, :NEW.CITY, :OLD.STATE, :NEW.STATE, 'U', v_user, v_date);
  END IF;
END;
/



CREATE TABLE WAREHOUSES_AUD
(
    OLDWAREHOUSENAME VARCHAR2(100),
	NEWWAREHOUSENAME VARCHAR2(100),
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE
);

CREATE OR REPLACE TRIGGER TRG_WAREHOUSES_AUD
BEFORE INSERT OR DELETE OR UPDATE ON WAREHOUSES
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO WAREHOUSES_AUD (OLDWAREHOUSENAME,	NEWWAREHOUSENAME, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(NULL, :NEW.WAREHOUSENAME , 'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO WAREHOUSES_AUD (OLDWAREHOUSENAME,	NEWWAREHOUSENAME, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.WAREHOUSENAME, NULL, 'D', v_user, v_date);
  ELSIF UPDATING THEN
    INSERT INTO WAREHOUSES_AUD (OLDWAREHOUSENAME,	NEWWAREHOUSENAME, OPERATION, USER_NAME, CREATED_DATE) 
    VALUES(:OLD.WAREHOUSENAME, :NEW.WAREHOUSENAME, 'U', v_user, v_date);
  END IF;
END;
/


CREATE TABLE DEPARTMENT_AUD
(
    OLDDEPTNAME VARCHAR2(100),
	NEWDEPTNAME VARCHAR2(100),
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE
);

CREATE OR REPLACE TRIGGER TRG_DEPARTMENT_AUD
BEFORE INSERT OR DELETE OR UPDATE ON DEPARTMENT
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO DEPARTMENT_AUD (OLDDEPTNAME,NEWDEPTNAME, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(NULL, :NEW.DEPTNAME , 'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO DEPARTMENT_AUD (OLDDEPTNAME,NEWDEPTNAME, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.DEPTNAME, NULL, 'D', v_user, v_date);
  ELSIF UPDATING THEN
    INSERT INTO DEPARTMENT_AUD (OLDDEPTNAME,NEWDEPTNAME, OPERATION, USER_NAME, CREATED_DATE) 
    VALUES(:OLD.DEPTNAME, :NEW.DEPTNAME, 'U', v_user, v_date);
  END IF;
END;
/


CREATE TABLE EMPLOYEES_AUD
(
    EMPLOYEEID NUMBER,
    OLDFIRSTNAME VARCHAR2(100),
	NEWFIRSTNAME VARCHAR2(100),
    OLDLASTNAME  VARCHAR2(100),
	NEWLASTNAME  VARCHAR2(100),
    OLDEMAIL  VARCHAR2(100),
	NEWEMAIL  VARCHAR2(100),
    OLDPHONE  VARCHAR2(100),
	NEWPHONE  VARCHAR2(100),
    OLDHIREDATE  DATE,
	NEWHIREDATE  DATE,
    OLDDOB DATE,
	NEWDOB DATE,
    OLDSALARY NUMBER,
	NEWSALARY NUMBER,
    OLDMANAGER  NUMBER,
	NEWMANAGER  NUMBER,
    OLDDESIGNATION  VARCHAR2(100),
	NEWDESIGNATION  VARCHAR2(100),
    OLDDEPARTMENT  NUMBER,
	NEWDEPARTMENT  NUMBER,
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE	
);


CREATE OR REPLACE TRIGGER TRG_EMPLOYEES_AUD
BEFORE INSERT OR DELETE OR UPDATE ON EMPLOYEES
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO EMPLOYEES_AUD (EMPLOYEEID,OLDFIRSTNAME,NEWFIRSTNAME,OLDLASTNAME,NEWLASTNAME,OLDEMAIL,NEWEMAIL,
	OLDPHONE,NEWPHONE,OLDHIREDATE,NEWHIREDATE,OLDDOB,NEWDOB,OLDSALARY,NEWSALARY,OLDMANAGER,NEWMANAGER,
	OLDDESIGNATION,NEWDESIGNATION,OLDDEPARTMENT,NEWDEPARTMENT, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:NEW.EMPLOYEEID, NULL, :NEW.FIRSTNAME , NULL, :NEW.LASTNAME, NULL, :NEW.EMAIL,
	NULL, :NEW.PHONE , NULL, :NEW.HIREDATE, NULL, :NEW.DOB, NULL, :NEW.SALARY,NULL, :NEW.MANAGER,
	NULL, :NEW.DESIGNATION , NULL, :NEW.DEPARTMENT, 'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO EMPLOYEES_AUD (EMPLOYEEID,OLDFIRSTNAME,NEWFIRSTNAME,OLDLASTNAME,NEWLASTNAME,OLDEMAIL,NEWEMAIL,
	OLDPHONE,NEWPHONE,OLDHIREDATE,NEWHIREDATE,OLDDOB,NEWDOB,OLDSALARY,NEWSALARY,OLDMANAGER,NEWMANAGER,
	OLDDESIGNATION,NEWDESIGNATION,OLDDEPARTMENT,NEWDEPARTMENT, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.EMPLOYEEID, :OLD.FIRSTNAME ,NULL, :OLD.LASTNAME, NULL, :OLD.EMAIL, NULL,
	:OLD.PHONE , NULL, :OLD.HIREDATE, NULL, :OLD.DOB, NULL, :OLD.SALARY,NULL, :OLD.MANAGER, NULL,
	:OLD.DESIGNATION , NULL, :OLD.DEPARTMENT, NULL, 'D', v_user, v_date);  
  ELSIF UPDATING THEN
    INSERT INTO EMPLOYEES_AUD (EMPLOYEEID,OLDFIRSTNAME,NEWFIRSTNAME,OLDLASTNAME,NEWLASTNAME,OLDEMAIL,NEWEMAIL,
	OLDPHONE,NEWPHONE,OLDHIREDATE,NEWHIREDATE,OLDDOB,NEWDOB,OLDSALARY,NEWSALARY,OLDMANAGER,NEWMANAGER,
	OLDDESIGNATION,NEWDESIGNATION,OLDDEPARTMENT,NEWDEPARTMENT, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.EMPLOYEEID, :OLD.FIRSTNAME, :NEW.FIRSTNAME , :OLD.LASTNAME, :NEW.LASTNAME, :OLD.EMAIL, :NEW.EMAIL,
	:OLD.PHONE, :NEW.PHONE , :OLD.HIREDATE, :NEW.HIREDATE, :OLD.DOB, :NEW.DOB, :OLD.SALARY, :NEW.SALARY, :OLD.MANAGER, :NEW.MANAGER,
	:OLD.DESIGNATION, :NEW.DESIGNATION , :OLD.DEPARTMENT, :NEW.DEPARTMENT, 'U', v_user, v_date);  
  END IF;
END;
/


CREATE TABLE PRODUCT_CATEGORY_AUD
(
    OLDCATEGORYNAME VARCHAR2(100),
	NEWCATEGORYNAME VARCHAR2(100),
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE	
);


CREATE OR REPLACE TRIGGER TRG_PRODUCT_CATEGORY_AUD
BEFORE INSERT OR DELETE OR UPDATE ON PRODUCT_CATEGORY
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO PRODUCT_CATEGORY_AUD (OLDCATEGORYNAME,NEWCATEGORYNAME, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(NULL, :NEW.CATEGORYNAME , 'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO PRODUCT_CATEGORY_AUD (OLDCATEGORYNAME,NEWCATEGORYNAME, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.CATEGORYNAME, NULL, 'D', v_user, v_date);
  ELSIF UPDATING THEN
    INSERT INTO PRODUCT_CATEGORY_AUD (OLDCATEGORYNAME,NEWCATEGORYNAME, OPERATION, USER_NAME, CREATED_DATE) 
    VALUES(:OLD.CATEGORYNAME, :NEW.CATEGORYNAME, 'U', v_user, v_date);
  END IF;
END;
/


CREATE TABLE PRODUCTS_AUD
(
    PRODUCTID NUMBER,
    OLDPRODUCTNAME VARCHAR2(100),
	NEWPRODUCTNAME VARCHAR2(100),
    OLDDESCRIPTION  VARCHAR2(100),
	NEWDESCRIPTION  VARCHAR2(100),
    OLDSTANDARDCOST  NUMBER,
	NEWSTANDARDCOST  NUMBER,
    OLDLISTPRICE  NUMBER,
	NEWLISTPRICE  NUMBER,
    OLDCATEGORY  NUMBER,
	NEWCATEGORY  NUMBER,
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE	
);



CREATE OR REPLACE TRIGGER TRG_PRODUCTS_AUD
BEFORE INSERT OR DELETE OR UPDATE ON PRODUCTS
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO PRODUCTS_AUD (PRODUCTID,OLDPRODUCTNAME,NEWPRODUCTNAME,OLDDESCRIPTION ,NEWDESCRIPTION,OLDSTANDARDCOST, NEWSTANDARDCOST ,
		OLDLISTPRICE,NEWLISTPRICE,OLDCATEGORY, NEWCATEGORY, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:NEW.PRODUCTID, NULL, :NEW.PRODUCTNAME , NULL, :NEW.DESCRIPTION, NULL, :NEW.STANDARDCOST,
		NULL, :NEW.LISTPRICE, NULL, :NEW.CATEGORY , 'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO PRODUCTS_AUD (PRODUCTID,OLDPRODUCTNAME,NEWPRODUCTNAME,OLDDESCRIPTION ,NEWDESCRIPTION,OLDSTANDARDCOST, NEWSTANDARDCOST ,
		OLDLISTPRICE,NEWLISTPRICE,OLDCATEGORY, NEWCATEGORY, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.PRODUCTID, :OLD.PRODUCTNAME , NULL, :OLD.DESCRIPTION, NULL, :OLD.STANDARDCOST, NULL,
		:OLD.LISTPRICE, NULL, :OLD.CATEGORY , NULL, 'D', v_user, v_date);
  ELSIF UPDATING THEN
    INSERT INTO PRODUCTS_AUD (PRODUCTID,OLDPRODUCTNAME,NEWPRODUCTNAME,OLDDESCRIPTION ,NEWDESCRIPTION,OLDSTANDARDCOST, NEWSTANDARDCOST ,
		OLDLISTPRICE,NEWLISTPRICE,OLDCATEGORY, NEWCATEGORY, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.PRODUCTID, :OLD.PRODUCTNAME, :NEW.PRODUCTNAME , :OLD.DESCRIPTION, :NEW.DESCRIPTION, :OLD.STANDARDCOST, :NEW.STANDARDCOST,
		:OLD.LISTPRICE, :NEW.LISTPRICE, :OLD.CATEGORY, :NEW.CATEGORY , 'U', v_user, v_date);
  END IF;
END;
/


CREATE TABLE INVENTORY_AUD
(
    INVENTORYID NUMBER,
    PRODUCTID NUMBER,
    OLDQUANTITY NUMBER,
	NEWQUANTITY NUMBER,
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE	
);


CREATE OR REPLACE TRIGGER TRG_INVENTORY_AUD
BEFORE INSERT OR DELETE OR UPDATE ON INVENTORY
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO INVENTORY_AUD (INVENTORYID,PRODUCTID,OLDQUANTITY,NEWQUANTITY, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:NEW.INVENTORYID, :NEW.PRODUCTID , NULL, :NEW.QUANTITY, 'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO INVENTORY_AUD (INVENTORYID,PRODUCTID,OLDQUANTITY,NEWQUANTITY, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.INVENTORYID, :OLD.PRODUCTID , :OLD.QUANTITY, NULL, 'D', v_user, v_date); 
  ELSIF UPDATING THEN
    INSERT INTO INVENTORY_AUD (INVENTORYID,PRODUCTID,OLDQUANTITY,NEWQUANTITY, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.INVENTORYID, :OLD.PRODUCTID , :NEW.QUANTITY, NULL 'U', v_user, v_date); 
  END IF;
END;
/


CREATE TABLE CUSTOMERS_AUD
(
    CUSTOMERID NUMBER,
    OLDNAME VARCHAR2(100),
	NEWNAME VARCHAR2(100),
    OLDADDRESS  VARCHAR2(100),
	NEWADDRESS  VARCHAR2(100),
    OLDWEBSITE  VARCHAR2(100),
	NEWWEBSITE  VARCHAR2(100),
    OLDFACEBOOK  VARCHAR2(100),
	NEWFACEBOOK  VARCHAR2(100),
    OLDTWITTER  VARCHAR2(100),
	NEWTWITTER  VARCHAR2(100),
    OLDWHATSAPP VARCHAR2(100),
	NEWWHATSAPP VARCHAR2(100),
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE	
);



CREATE OR REPLACE TRIGGER TRG_CUSTOMERS_AUD
BEFORE INSERT OR DELETE OR UPDATE ON CUSTOMERS
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO CUSTOMERS_AUD (CUSTOMERID,OLDNAME,NEWNAME,OLDADDRESS,NEWADDRESS,OLDWEBSITE,NEWWEBSITE,OLDFACEBOOK,NEWFACEBOOK,
		OLDTWITTER,NEWTWITTER,OLDWHATSAPP,NEWWHATSAPP, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:NEW.CUSTOMERID, NULL, :NEW.NAME , NULL, :NEW.ADDRESS,NULL, :NEW.WEBSITE,NULL, :NEW.FACEBOOK,
		NULL, :NEW.TWITTER , NULL, :NEW.WHATSAPP,'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO CUSTOMERS_AUD (CUSTOMERID,OLDNAME,NEWNAME,OLDADDRESS,NEWADDRESS,OLDWEBSITE,NEWWEBSITE,OLDFACEBOOK,NEWFACEBOOK,
		OLDTWITTER,NEWTWITTER,OLDWHATSAPP,NEWWHATSAPP, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.CUSTOMERID, :OLD.NAME , NULL, :OLD.ADDRESS,NULL, :OLD.WEBSITE,NULL, :OLD.FACEBOOK, NULL,
		:OLD.TWITTER , NULL, :OLD.WHATSAPP, NULL, 'D', v_user, v_date);  
  ELSIF UPDATING THEN
    INSERT INTO CUSTOMERS_AUD (CUSTOMERID,OLDNAME,NEWNAME,OLDADDRESS,NEWADDRESS,OLDWEBSITE,NEWWEBSITE,OLDFACEBOOK,NEWFACEBOOK,
		OLDTWITTER,NEWTWITTER,OLDWHATSAPP,NEWWHATSAPP, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.CUSTOMERID, :OLD.NAME, :NEW.NAME , :OLD.ADDRESS, :NEW.ADDRESS, :OLD.WEBSITE, :NEW.WEBSITE, :OLD.FACEBOOK, :NEW.FACEBOOK,
		:OLD.TWITTER, :NEW.TWITTER , :OLD.WHATSAPP, :NEW.WHATSAPP, 'U', v_user, v_date);  
  END IF;
END;
/


CREATE TABLE CONTACTS_AUD
(
    CONTACTID NUMBER,
    OLDFIRSTNAME VARCHAR2(100),
	NEWFIRSTNAME VARCHAR2(100),
    OLDLASTNAME  VARCHAR2(100),
	NEWLASTNAME  VARCHAR2(100),
    OLDEMAIL  VARCHAR2(100),
	NEWEMAIL  VARCHAR2(100),
    OLDPHONE  VARCHAR2(100),
	NEWPHONE  VARCHAR2(100),
    CUSTOMERID  NUMBER,
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE	
);


CREATE OR REPLACE TRIGGER TRG_CONTACTS_AUD
BEFORE INSERT OR DELETE OR UPDATE ON CONTACTS
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO CONTACTS_AUD (CONTACTID ,OLDFIRSTNAME,NEWFIRSTNAME,OLDLASTNAME,NEWLASTNAME,OLDEMAIL,NEWEMAIL,
		OLDPHONE,NEWPHONE,CUSTOMERID, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:NEW.CONTACTID, NULL, :NEW.FIRSTNAME , NULL, :NEW.LASTNAME, NULL, :NEW.EMAIL, 
		NULL, :NEW.PHONE , :NEW.CUSTOMERID, 'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO CONTACTS_AUD (CONTACTID ,OLDFIRSTNAME,NEWFIRSTNAME,OLDLASTNAME,NEWLASTNAME,OLDEMAIL,NEWEMAIL,
		OLDPHONE,NEWPHONE,CUSTOMERID, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.CONTACTID, :OLD.FIRSTNAME , NULL, :OLD.LASTNAME, NULL, :OLD.EMAIL, NULL,
		:OLD.PHONE , NULL, :OLD.CUSTOMERID, NULL, 'D', v_user, v_date);    
  ELSIF UPDATING THEN
    INSERT INTO CONTACTS_AUD (CONTACTID ,OLDFIRSTNAME,NEWFIRSTNAME,OLDLASTNAME,NEWLASTNAME,OLDEMAIL,NEWEMAIL,
		OLDPHONE,NEWPHONE,CUSTOMERID, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.CONTACTID, :OLD.FIRSTNAME, :NEW.FIRSTNAME , :OLD.LASTNAME, :NEW.LASTNAME, :OLD.EMAIL, :NEW.EMAIL, 
		:OLD.PHONE, :NEW.PHONE , :OLD.CUSTOMERID, 'U', v_user, v_date);   
  END IF;
END;
/



CREATE TABLE ORDER_STATUS_AUD
(
    STATUSID NUMBER,
    OLDSTATUS  VARCHAR2(100),
	NEWSTATUS  VARCHAR2(100),
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE	
);


CREATE OR REPLACE TRIGGER TRG_ORDER_STATUS_AUD
BEFORE INSERT OR DELETE OR UPDATE ON ORDER_STATUS
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO ORDER_STATUS_AUD (STATUSID ,OLDSTATUS, NEWSTATUS, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:NEW.STATUSID, NULL, :NEW.STATUS ,'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO ORDER_STATUS_AUD (STATUSID ,OLDSTATUS,NEWSTATUS, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.STATUSID, :OLD.STATUS, NULL ,'D', v_user, v_date);  
  ELSIF UPDATING THEN
    INSERT INTO ORDER_STATUS_AUD (STATUSID ,OLDSTATUS,NEWSTATUS, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.STATUSID, :OLD.STATUS, :NEW.STATUS ,'U', v_user, v_date);    
  END IF;
END;
/



CREATE TABLE ORDERS_AUD
(
    ORDERID NUMBER,
    OLDCUSTOMERID NUMBER,
	NEWCUSTOMERID NUMBER,
    OLDSTATUS  NUMBER,
	NEWSTATUS  NUMBER,
    OLDSALESMANID  NUMBER,
	NEWSALESMANID  NUMBER,
    OLDORDERDATE  DATE,
	NEWORDERDATE  DATE,
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE	
);



CREATE OR REPLACE TRIGGER TRG_ORDERS_AUD
BEFORE INSERT OR DELETE OR UPDATE ON ORDERS
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO ORDERS_AUD (ORDERID,OLDCUSTOMERID,NEWCUSTOMERID,OLDSTATUS,NEWSTATUS,OLDSALESMANID,NEWSALESMANID,OLDORDERDATE,NEWORDERDATE, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:NEW.ORDERID, NULL, :NEW.CUSTOMERID , NULL, :NEW.STATUS, NULL, :NEW.SALESMANID, NULL, :NEW.ORDERDATE ,  'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO ORDERS_AUD (ORDERID,OLDCUSTOMERID,NEWCUSTOMERID,OLDSTATUS,NEWSTATUS,OLDSALESMANID,NEWSALESMANID,OLDORDERDATE,NEWORDERDATE, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.ORDERID, :OLD.CUSTOMERID , NULL, :OLD.STATUS, NULL, :OLD.SALESMANID, NULL, :OLD.ORDERDATE , NULL, 'D', v_user, v_date); 
  ELSIF UPDATING THEN
    INSERT INTO ORDERS_AUD (ORDERID,OLDCUSTOMERID,NEWCUSTOMERID,OLDSTATUS,NEWSTATUS,OLDSALESMANID,NEWSALESMANID,OLDORDERDATE,NEWORDERDATE, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:NEW.ORDERID, :OLD.CUSTOMERID,:NEW.CUSTOMERID,:OLD.STATUS,:NEW.STATUS,:OLD.SALESMANID,:NEW.SALESMANID,:OLD.ORDERDATE,
	:NEW.ORDERDATE ,  'U', v_user, v_date); 
  END IF;
END;
/


CREATE TABLE ORDER_ITEMS_AUD
(
    ORDERID NUMBER,
    ITEMID NUMBER,
    PRODUCTID  NUMBER,
    OLDQUANTITY  NUMBER,
	NEWQUANTITY  NUMBER,
    OLDUNITPRICE  NUMBER,
	NEWUNITPRICE  NUMBER,
    INVENTORYID NUMBER,
    WAREHOUSEID NUMBER,
	OPERATION VARCHAR2(1),
	USER_NAME VARCHAR2(100),
	CREATED_DATE DATE	
);


CREATE OR REPLACE TRIGGER TRG_ORDER_ITEMS_AUD
BEFORE INSERT OR DELETE OR UPDATE ON ORDER_ITEMS
FOR EACH ROW
DECLARE
  v_user VARCHAR2 (30);
  v_date date;
BEGIN
  SELECT user, sysdate INTO v_user, v_date  FROM dual;
  
  IF INSERTING THEN
    INSERT INTO ORDER_ITEMS_AUD (ORDERID,ITEMID,PRODUCTID,OLDQUANTITY,NEWQUANTITY,OLDUNITPRICE,NEWUNITPRICE,INVENTORYID,WAREHOUSEID, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:NEW.ORDERID, :NEW.ITEMID, :NEW.PRODUCTID , NULL, :NEW.QUANTITY, NULL, :NEW.UNITPRICE, :NEW.INVENTORYID, :NEW.WAREHOUSEID ,  
	'I', v_user, v_date);  
  ELSIF DELETING THEN
    INSERT INTO ORDER_ITEMS_AUD (ORDERID,ITEMID,PRODUCTID,OLDQUANTITY,NEWQUANTITY,OLDUNITPRICE,NEWUNITPRICE,INVENTORYID,WAREHOUSEID, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.ORDERID, :OLD.ITEMID, :OLD.PRODUCTID , :OLD.QUANTITY, NULL, :OLD.UNITPRICE, NULL, :OLD.INVENTORYID, :OLD.WAREHOUSEID ,  
	'D', v_user, v_date);  
  ELSIF UPDATING THEN
    INSERT INTO ORDER_ITEMS_AUD (ORDERID,ITEMID,PRODUCTID,OLDQUANTITY,NEWQUANTITY,OLDUNITPRICE,NEWUNITPRICE,INVENTORYID,WAREHOUSEID, OPERATION, USER_NAME, CREATED_DATE) 
	VALUES(:OLD.ORDERID, :OLD.ITEMID, :OLD.PRODUCTID , :OLD.QUANTITY, :NEW.QUANTITY, :OLD.UNITPRICE, :NEW.UNITPRICE, :NEW.INVENTORYID, 
	:NEW.WAREHOUSEID , 'U', v_user, v_date); 
  END IF;
END;
/





-- INDEX creation


CREATE INDEX INDX_ORDER_CUS ON ORDERS (CUSTOMERID);
CREATE INDEX INDX_ORDER_STATUS ON ORDERS (STATUS);

CREATE INDEX INDX_ORDERITEM_PROD ON ORDER_ITEMS (PRODUCTID);
CREATE INDEX INDX_ORDERITEM_INVID ON ORDER_ITEMS (INVENTORYID);
CREATE INDEX INDX_ORDERITEM_WARID ON ORDER_ITEMS (WAREHOUSEID);

CREATE INDEX INDX_EMP_FSNAME ON EMPLOYEES(FIRSTNAME,LASTNAME);
CREATE INDEX INDX_EMP_PHONE ON EMPLOYEES(PHONE);
CREATE INDEX INDX_EMP_HIREDATE ON EMPLOYEES(HIREDATE);
CREATE INDEX INDX_EMP_DEPT ON EMPLOYEES(DEPARTMENT);

CREATE INDEX INDX_LOCATION_COUNTRY ON LOCATIONS(COUNTRY);
CREATE INDEX INDX_COUNTRIES_REGION ON COUNTRIES(REGION);


